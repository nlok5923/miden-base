use.miden::sat::internal::constants
use.miden::sat::internal::layout
use.miden::sat::internal::account
use.miden::sat::internal::asset_vault

# CONSTANTS
# =================================================================================================

# The diff between the memory address after first mem_stream operation and the next target when
# generating the consumed notes commitment.
const.CREATED_NOTE_HASHING_MEM_DIFF=1022

# CREATED NOTES PROCEDURES
# =================================================================================================

#! Computes the vault hash of the created note with index i. The hash is computed as a sequential
#! hash of the assets contained in the note. If there are an odd number of assets, then for the
#! final hashing permutation we pad the last word of the hasher rate with ZERO's.
#!
#! Stack: [note_data_ptr]
#! Output: [VAULT_HASH]
#!
#! - note_data_ptr is a pointer to the data section of the created note.
#! - VAULT_HASH is the vault hash of the created note with index i.
proc.compute_created_note_vault_hash
    # duplicate note pointer and fetch num_assets
    dup dup exec.layout::get_created_note_num_assets
    # => [num_assets, note_data_ptr, note_data_ptr]

    # calculate the number of pairs of assets (takes ceiling if we have an odd number)
    add.1 u32assert u32div.2
    # => [num_asset_pairs, note_data_ptr, note_data_ptr]

    # initiate counter for assets
    push.0
    # => [asset_counter, num_asset_pairs, note_data_ptr, note_data_ptr]

    # prepare address and stack for reading assets
    movup.2 exec.layout::get_created_note_asset_data_ptr padw padw padw
    # => [PAD, PAD, PAD, asset_data_ptr, asset_counter, num_asset_pairs, note_data_ptr]

    # check if we should loop
    dup.14 dup.14 neq
    # => [should_loop, PAD, PAD, PAD, asset_data_ptr, asset_counter, num_asset_pairs, note_data_ptr]

    # loop and read assets from memory
    while.true
        # read assets from memory.
        # if this is the last permutation of the loop and we have an odd number of assets then we
        # implicitly pad the last word of the hasher rate with ZERO's by reading from empty memory.
        mem_stream hperm
        # => [PERM, PERM, PERM, asset_data_ptr, asset_counter, num_asset_pairs, note_data_ptr]

        # check if we should loop again
        movup.13 add.1 dup movdn.14 dup.15 neq
        # => [should_loop, PERM, PERM, PERM, asset_data_ptr, asset_counter, num_asset_pairs,
        #     note_data_ptr]
    end

    # extract digest from hasher rate elements (h_0, ..., h_3)
    dropw swapw dropw
    # => [VAULT_HASH, asset_data_ptr, asset_counter, num_asset_pairs, note_data_ptr]

    # drop accessory variables from stack
    movup.4 drop
    movup.4 drop
    movup.4 drop
    # => [VAULT_HASH, note_data_ptr]

    # save vault hash to memory
    movup.4 exec.layout::set_created_note_vault_hash
    # => []
end

#! Computes the hash of a created note with index i. This is computed as follows:
#! - we define, recipient =
#!       hash(hash(hash(serial_num, [0; 4]), script_hash), input_hash)
#! - we then compute the created note hash as:
#!       hash(recipient, vault_hash)
#!
#! Stack: [note_data_ptr]
#! Output: [CREATED_NOTE_HASH]
#!
#! - note_data_ptr is a pointer to the data section of the created note.
#! - CREATED_NOTE_HASH is the hash of the created note with index i.
proc.compute_created_note_hash
    # pad capacity elements of hasher
    padw

    # insert created note recipient into the first four elements of the hasher rate
    dup.4 exec.layout::get_created_note_recipient

    # populate the last four elements of the hasher rate with the created note vault hash
    dup.8 exec.compute_created_note_vault_hash

    # compute created note hash and extract digest
    hperm dropw swapw dropw

    # save created note hash to memory
    movup.4 mem_storew
end

#! Computes a commitment to the created notes. This is computed as a sequential hash of
#! (note_hash, note_metadata) tuples.
#!
#! Stack: []
#! Output: [CREATED_NOTES_COMMITMENT]
#!
#! - CREATED_NOTES_COMMITMENT is the commitment of the created notes.
export.compute_output_notes_hash
    # get the number of created notes from memory
    exec.layout::get_num_created_notes

    # calculate the address at which we should stop looping
    exec.layout::get_created_note_ptr

    # compute pointer for first address
    push.0 exec.layout::get_created_note_ptr

    # prepare stack for hashing
    padw padw padw

    # check if the number of created notes is greater then 0. Conditional for the while loop.
    dup.13 dup.13 neq

    # loop and hash created notes
    while.true
        # compute created note hash (this also computes created not vault hash)
        dup.12 exec.compute_created_note_hash

        # drop created note hash from stack
        dropw

        # permute over (note_hash, note_metadata)
        mem_stream hperm

        # increment created note pointer and check if we should loop again
        movup.12 push.CREATED_NOTE_HASHING_MEM_DIFF add dup movdn.13 dup.14 neq
    end

    # extract digest from hasher rate elements (h_0, ..., h_3)
    dropw swapw dropw

    # drop accessory variables from stack
    movup.4 drop
    movup.4 drop
end

# BUILD OUTPUT VAULT
# =================================================================================================

#! Builds the output vault which is combination of the assets in the account vault at the end of
#! the transaction and all the assets from the created notes.
#!
#! The output vault is built as follows:
#! - we first copy the account vault root to the output vault root.
#! - we then loop over the created notes and insert the assets into the output vault.
#!
#! Stack: []
#! Output: []
proc.build_output_vault
    # copy final account vault root to output account vault root
    exec.layout::get_acct_vault_root exec.layout::set_output_vault_root
    # => []

    # get the number of created notes from memory
    exec.layout::get_num_created_notes
    # => [num_created_notes]

    # calculate the address at which we should stop looping
    exec.layout::get_created_note_ptr
    # => [created_notes_end_ptr]

    # compute pointer for the first created note
    push.0 exec.layout::get_created_note_ptr
    # => [created_note_ptr, created_notes_end_ptr]

    # check if the number of created notes is greater then 0. Conditional for the while loop.
    dup.1 dup.1 neq
    # => [should_loop, created_note_ptr, created_notes_end_ptr]

    # loop over created notes and add assets to output vault
    while.true
        # get the number of assets for the created note from memory
        dup exec.layout::get_created_note_num_assets
        # => [num_assets, note_data_ptr, created_notes_end_ptr]

        # prepare stack for reading created note assets
        exec.layout::get_output_vault_root_ptr dup.2 exec.layout::get_created_note_asset_data_ptr dup
        # => [assets_start_ptr, assets_start_ptr, output_vault_root_ptr, num_assets, note_data_ptr.
        #     created_notes_end_ptr]

        # compute the end pointer for created note asset looping
        dup.3 add swap
        # => [assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets, note_data_ptr,
        #     created_notes_end_ptr]

        # assess if we should loop
        dup.1 dup.1 neq
        # => [should_loop, assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets,
        #     note_data_ptr, created_notes_end_ptr]

        # loop over created note assets and insert them into the output vault
        while.true
            # duplicate output_vault_root_ptr
            dup.2
            # => [output_vault_root_ptr, assets_start_ptr, assets_end_ptr, output_vault_root_ptr,
            #     num_assets, note_data_ptr, created_notes_end_ptr]

            # read the created note asset from memory
            padw dup.5 mem_loadw
            # => [ASSET, output_vault_root_ptr, assets_start_ptr, assets_end_ptr, output_vault_root_ptr,
            #     num_assets, note_data_ptr, created_notes_end_ptr]

            # insert created note asset into output vault
            exec.asset_vault::add_asset dropw
            # => [assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets, note_data_ptr,
            #     created_notes_end_ptr]

            # increment assets_start_ptr and asses if we should loop again
            add.1 dup.1 dup.1 neq
            # => [should_loop, assets_start_ptr, assets_end_ptr, output_vault_root_ptr, num_assets,
            #     note_data_ptr, created_notes_end_ptr]
        end

        # clean stack
        drop drop drop drop
        # => [note_data_ptr, created_note_end_ptr]

        # increment created note pointer and check if we should loop again
        exec.constants::get_note_mem_size add dup.1 dup.1 neq
        # => [should_loop, created_note_ptr, created_notes_end_ptr]
    end

    # clean stack
    drop drop
    # => []
end

# ACCOUNT CODE UPDATE
# =================================================================================================

#! Updates the account code root if the account code has changed. `NEW_ACCT_CODE_ROOT` is set to
#! the initial account code root in the prologue and as such this procedure will not result in a
#! change to the account code root if the `account::set_code` procedure has not been invoked in
#! this transaction.
#!
#! Stack: []
#! Output: []
proc.update_account_code
    # check if the account code root has been updated
    exec.layout::get_new_acct_code_root
    # => [NEW_ACCT_CODE_ROOT]

    # set the account code root to the new account code root (may not have changed)
    exec.layout::set_acct_code_root
    # => []
end

# TRANSACTION EPILOGUE PROCEDURE
# =================================================================================================

#! Finalizes the transaction by performing the following steps:
#! - computes the final account hash
#! - if the account has changed, assert that the final account nonce is greater than the initial
#!   account nonce
#! - computes the created notes commitment
#! - asserts that the input and output vault roots are equal
#!
#! Stack: []
#! Output: [TX_SCRIPT_ROOT, CREATED_NOTES_COMMITMENT, FINAL_ACCOUNT_HASH]
#!
#! - TX_SCRIPT_ROOT is the transaction script root
#! - CREATED_NOTES_COMMITMENT is the commitment of the created notes
#! - FINAL_ACCOUNT_HASH is the final account hash
export.finalize_transaction
    # update account code
    exec.update_account_code
    # => []

    # get the initial account hash
    exec.layout::get_init_acct_hash
    # => [INIT_ACCT_HASH]

    # get the offset for the end of the account data section
    exec.layout::get_acct_data_end_ptr
    # => [acct_data_end_ptr, INIT_ACCT_HASH]

    # get the offset for the start of the account data section
    exec.layout::get_acct_data_ptr
    # => [acct_data_ptr, acct_data_end_ptr, INIT_ACCT_HASH]

    # compute the final account hash
    exec.account::get_current_hash
    # => [FINAL_ACCOUNT_HASH, acct_data_ptr, acct_data_end_ptr, INIT_ACCT_HASH]

    # insert final account data into the advice map
    adv.insert_mem
    # => [FINAL_ACCOUNT_HASH, acct_data_ptr, acct_data_end_ptr, INIT_ACCT_HASH]

    # drop account data section pointers
    movup.4 drop movup.4 drop
    # => [FINAL_ACCOUNT_HASH, INIT_ACCT_HASH]

    # check if the account has changed
    eqw not
    # => [has_acct_changed, FINAL_ACCOUNT_HASH, INIT_ACCT_HASH]

    # if the account has changed then apply nonce checks
    if.true
        # get initial nonce from memory
        exec.layout::get_init_nonce
        # => [init_nonce, FINAL_ACCOUNT_HASH, INIT_ACCT_HASH]

        # get current nonce from memory
        exec.layout::get_acct_nonce
        # => [current_nonce, init_nonce, FINAL_ACCOUNT_HASH, INIT_ACCT_HASH]

        # assert that initial nonce is less than current nonce
        lt assert
        # => [FINAL_ACCOUNT_HASH, INIT_ACCT_HASH]
    end

    # drop initial account hash
    swapw dropw
    # => [FINAL_ACCOUNT_HASH]

    # build the output vault
    exec.build_output_vault
    # => [FINAL_ACCOUNT_HASH]

    # compute created note hash
    exec.compute_output_notes_hash
    # => [CREATED_NOTES_COMMITMENT, FINAL_ACCOUNT_HASH]

    # compute the end boundary of the created notes section
    exec.layout::get_num_created_notes exec.layout::get_created_note_ptr movdn.4
    # => [CREATED_NOTES_COMMITMENT, created_notes_end_ptr, FINAL_ACCOUNT_HASH]

    # compute the start boundary of the created notes section
    exec.layout::get_created_note_data_offset movdn.4
    # => [CREATED_NOTES_COMMITMENT, created_note_ptr, created_notes_end_ptr, FINAL_ACCOUNT_HASH]

    # insert created data into the advice map
    adv.insert_mem
    # => [CREATED_NOTES_COMMITMENT, created_note_ptr, created_notes_end_ptr, FINAL_ACCOUNT_HASH]

    # drop created note pointers
    movup.4 drop movup.4 drop
    # => [CREATED_NOTES_COMMITMENT, FINAL_ACCOUNT_HASH]

    # load the transaction script root on to the top of the stack
    exec.layout::get_tx_script_root
    # => [TX_SCRIPT_ROOT, CREATED_NOTES_COMMITMENT, FINAL_ACCOUNT_HASH]

    # truncate stack
    swapw.3 dropw swapw.3 dropw swapw.3 dropw
    # => [TX_SCRIPT_ROOT, CREATED_NOTES_COMMITMENT, FINAL_ACCOUNT_HASH]

    # assert no net creation or destruction of assets over the transaction
    exec.layout::get_input_vault_root exec.layout::get_output_vault_root assert_eqw
    # => [TX_SCRIPT_ROOT, CREATED_NOTES_COMMITMENT, FINAL_ACCOUNT_HASH]
end
