use.std::collections::smt
use.std::collections::mmr

use.miden::sat::internal::account
use.miden::sat::internal::asset_vault
use.miden::sat::internal::constants
use.miden::sat::internal::layout
use.miden::sat::internal::utils

# PUBLIC INPUTS
# =================================================================================================

#! Processes the global inputs provided via the stack. This involves storing the global inputs at
#! the appropriate memory addresses.
#!
#! Stack: [BH, acct_id, IAH, NC]
#! Output: []
#!
#! - BH is the latest known block hash at the time of transaction execution.
#! - acct_id is the account id of the account that the transaction is being executed against.
#! - IAH is the initial account hash of the account that the transaction is being executed against.
#! - NC is the nullifier commitment of the transaction. This is a sequential hash of all
#!   (nullifier, script_root) pairs for the notes consumed in the transaction.
proc.process_global_inputs
    # store the block hash
    exec.layout::set_blk_hash
    # => [acct_id, IAH, NC]

    # store the account id
    exec.layout::set_global_acct_id
    # => [IAH, NC]

    # store the initial account hash
    exec.layout::set_init_acct_hash
    # => [NC]

    # store the nullifier commitment
    exec.layout::set_nullifier_com
    # => []
end

# BLOCK DATA
# =================================================================================================

#! Process the block data provided via the advice provider. This involves reading the data from
#! the advice provider and storing it at the appropriate memory addresses. As the block data is
#! read from the advice provider, the block hash is computed. It is asserted that the computed
#! block hash matches the block hash stored in the global inputs.
#!
#! Stack: []
#! Advice stack: [NR, PH, CR, AR, NUL_R, BR, PH, block_number, 0, 0, 0, 0, 0, 0, 0]
#! Output: []
#!
#! - NR is the note root of the last known block.
#! - PH is the previous hash of the last known block.
#! - CR is the chain root of the last known block.
#! - AR is the account root of the last known block.
#! - NUL_R is the nullifier root of the last known block.
#! - BR is the batch root of the last known block.
#! - PH is the proof hash of the last known block.
#! - block_number is the block number of the last known block.
proc.process_block_data
    # address to store the block data
    exec.layout::get_block_data_ptr
    # => [block_data_ptr]

    # prepare the stack for reading block data
    padw padw padw
    # => [ZERO, ZERO, ZERO, block_data_ptr]

    # read the block data
    adv_pipe hperm adv_pipe hperm adv_pipe hperm adv_pipe hperm
    # => [PERM, PERM, PERM, block_data_ptr']

    # extract digest from hasher rate elements (h_0, ..., h_3)
    dropw swapw dropw
    # => [DIG, block_data_ptr']

    # load the note root from the advice provider
    padw adv_loadw
    # => [NR, DIG, block_data_ptr']

    # store the note root in memory
    dupw exec.layout::set_note_root
    # => [NR, DIG, block_data_ptr']

    # merge the note root with the block data digest
    hmerge
    # => [BH, block_data_ptr']

    # assert that the block hash matches the hash in global inputs
    exec.layout::get_blk_hash assert_eqw
    # => [block_data_ptr']

    # clear the stack
    drop
    # => []
end

# CHAIN DATA
# =================================================================================================

#! Process the chain data provided via the advice provider. This involves reading the MMR data from
#! the advice provider and storing it at the appropriate memory addresses. As the MMR peaks are
#! read from the advice provider, the chain root is computed. It is asserted that the computed
#! chain root matches the chain root stored in the block data section. The number of words that the
#! advice provider will send for MMR peaks is variable: it will be at least 16 but could be up to
#! 63. The actual number will be computed based on num_leaves.
#!
#! Stack: []
#! Advice Map: {
#!              MMR_ROOT: [num_leaves, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14,
#!                         P15, P16, ..., ...]
#!             }
#! Output: []
#!
#! - num_leaves is the number of leaves in the MMR.
#! - P1, P2, ... are the MMR peaks.
proc.process_chain_data
    # get a pointer to the chain mmr data
    exec.layout::get_chain_mmr_ptr
    # => [chain_mmr_ptr]

    # get the chain root
    exec.layout::get_chain_root
    # => [CHAIN_ROOT, chain_mmr_ptr]

    # unpack mmr
    exec.mmr::unpack
    # => []
end

# ACCOUNT DATA
# =================================================================================================

#! Validates that the account the transaction is being executed against satisfies the criteria
#! for a new account.
#!
#! Stack: []
#! Output: []
#!
#!
#! Apply the following validation to the new account:
#!   * assert that the account id is valid.
#!   * assert that the account vault is empty.
#!   * assert that the account nonce is set to 0.
#!   * read the account seed from the advice provider and assert it satisfies seed requirements.
proc.validate_new_account
    # Assert the account id of the account is valid
    exec.layout::get_acct_id exec.account::validate_id
    # => []

    # Assert the account nonce is 0
    exec.layout::get_acct_nonce eq.0 assert
    # => []

    # Assert the initial vault is empty
    # -----------------------------------------------------------------------------------------
    # get the account vault root
    exec.layout::get_acct_vault_root
    # => [ACCT_VAULT_ROOT]

    # push empty vault root onto stack
    exec.constants::get_empty_tsmt_root
    # => [EMPTY_VAULT_ROOT, ACCT_VAULT_ROOT]

    assert_eqw
    # => []

    # Assert faucet reserved slot is correctly initialized
    # -----------------------------------------------------------------------------------------
    # check if the account is a faucet
    exec.account::get_id dup exec.account::is_faucet
    # => [is_faucet, acct_id]

    # process conditional logic depending on whether the account is a faucet
    if.true
        # get the faucet reserved slot
        exec.account::get_faucet_storage_data_slot exec.account::get_item
        # => [FAUCET_RESERVED_SLOT, acct_id]

        # check if the account is a fungible faucet
        movup.4 exec.account::is_fungible_faucet
        # => [is_fungible_faucet, FAUCET_RESERVED_SLOT]

        if.true
            # assert the fungible faucet reserved slot is initialized correctly (EMPTY_WORD)
            or or or assertz
            # => []
        else
            # assert the non-fungible faucet reserved slot is initialized correctly (root of
            # empty TSMT)
            exec.constants::get_empty_tsmt_root assert_eqw
            # => []
        end
    else
        # drop the account id
        drop
        # => []
    end

    # Assert the provided account seed satisfies the seed requirements
    # -----------------------------------------------------------------------------------------
    exec.account::validate_seed
    # => []
end

#! Process the account data provided via the advice provider. This involves reading the data from
#! the advice provider and storing it at the appropriate memory addresses. As the account data is
#! read from the advice provider, the account hash is computed.  If the account is new then the
#! global initial account hash is updated and the new account is validated.  If the account
#! already exists then it is asserted that the computed account hash matches the account hash
#! provided via global inputs. It is also asserted that the account id matches the account id
#! provided via the stack public inputs.
#!
#! Stack: []
#! Advice stack: [acct_id, ZERO, ZERO, nonce, AVR, ASR, ACR]
#! Output: []
#!
#! - acct_id is the account id.
#! - nonce is the account nonce.
#! - AVR is the account vault root.
#! - ASR is the account storage root.
#! - ACR is the account code root.
proc.process_acct_data
    # address to store the account data
    exec.layout::get_acct_data_ptr
    # => [acct_data_ptr]

    # prepare the stack for reading account data
    padw padw padw
    # => [ZERO, ZERO, ZERO, acct_data_ptr]

    # read the account data
    adv_pipe hperm adv_pipe hperm
    # => [ACT_DATA', ACCT_HASH, CAP', act_data_ptr']

    # extract digest from hasher rate elements (h_0, ..., h_3) and drop pointer
    dropw swapw dropw movup.4 drop
    # => [ACCT_HASH]

    # check if the account is new
    padw exec.layout::get_init_acct_hash eqw movdn.8 dropw dropw
    # => [is_new, ACCT_HASH]

    # process conditional logic depending on whether the account is new or existing
    if.true
        # set the initial account hash
        exec.layout::set_init_acct_hash
        # => []

        # validate the new account
        exec.validate_new_account
        # => []
    else
        # assert that the existing account hash matches the hash in global inputs
        exec.layout::get_init_acct_hash assert_eqw
        # => []
    end

    # assert the account id matches the account id in global inputs
    exec.layout::get_global_acct_id
    exec.layout::get_acct_id
    assert_eq
    # => []

    # store a copy of the initial nonce in global inputs
    exec.layout::get_acct_nonce
    exec.layout::set_init_nonce
    # => []

    # set the new account code root to the initial account code root
    # this is used for managing code root updates
    exec.layout::get_acct_code_root
    exec.layout::set_new_acct_code_root
    # => []

    # copy the initial account vault hash to the input vault hash to support transaction asset
    # invariant checking
    exec.layout::get_acct_vault_root exec.layout::set_input_vault_root
    # => []
end

# CONSUMED NOTES DATA
# =================================================================================================

#! Authenticate the consumed note data provided via the advice provider is consistent with the
#! the chain history.  This is achieved by:
#! - authenticating the MMR leaf associated with the block the note was created in.
#! - authenticating the note root associated with the block the note was created in.
#! - authenticating the note and its metadata in the note Merkle tree from the block the note was
#!   created in.
#!
#! Stack: [AUTH_DIGEST]
#! Advice Stack: [leaf_pos, SUB_HASH, NOTE_ROOT, note_index]
#! Output: []
#!
#! - AUTH_DIGEST is the digest of the consumed note data computed as hash(NOTE_HASH, NOTE_METADATA)
#! - leaf_pos is the position of the leaf in the MMR associated with the block the note was created
#!   in. This is equivalent to the block number.
#! - SUB_HASH is the sub hash of the block the note was created in.
#! - NOTE_ROOT is the note root of the block the note was created in.
#! - note_index is the index of the note in the note Merkle tree.
proc.authenticate_note.2
    # load data required for MMR get operation
    exec.layout::get_chain_mmr_ptr adv_push.1
    # => [leaf_pos, chain_mmr_ptr, AUTH_DIGEST]

    # get the chain MMR leaf associated with the block the note was created in
    exec.mmr::get
    # => [MMR_LEAF, AUTH_DIGEST]

    # prepare the stack to read the sub hash and note root from the advice provider
    locaddr.0 padw padw padw
    # => [PAD, PAD, PAD, mem_ptr, MMR_LEAF, AUTH_DIGEST]

    # read the core hash and note root from the advice provider
    adv_pipe hperm
    # => [PERM, PERM, PERM, mem_ptr', MMR_LEAF, AUTH_DIGEST]

    # extract the digest and assert it matches MMR_LEAF
    dropw movup.8 drop movupw.2 assert_eqw
    # => [AUTH_DIGEST]

    # load the note root from memory
    loc_loadw.1 swapw
    # => [AUTH_DIGEST, NOTE_ROOT]

    # load the index of the note
    adv_push.1 movdn.4
    # => [AUTH_DIGEST, note_index, NOTE_ROOT]

    # get the depth of the note tree
    exec.constants::get_note_tree_depth movdn.4
    # => [AUTH_DIGEST, depth, note_index, NOTE_ROOT]

    # verify the note hash
    mtree_verify
    # => [AUTH_DIGEST, depth, note_index, NOTE_ROOT]

    # clean the stack
    dropw drop drop dropw
    # => []
end

#! Reads data for consumed note i from the advice provider and stores it in memory at the
#! appropriate memory address. This includes computing and storing the nullifier and the
#! note hash.
#!
#! Stack: [i]
#! Advice stack: [CN1_SN, CN1_SR, CN1_IR, CN1_VR,
#!               CN1_NA,
#!               CN1_A1, CN1_A2, ...]
#!
#! Output: []
#!
#! - i is the index of the consumed note.
#! - CN1_SN is the serial number of consumed note 1.
#! - CN1_SR is the script root of consumed note 1.
#! - CN1_IR is the inputs root of consumed note 1.
#! - CN1_VR is the vault root of consumed note 1.
#! - CN1_NA is the number of assets in consumed note 1.
#! - CN1_A1 is the first asset of consumed note 1.
#! - CN1_A2 is the second asset of consumed note 1.
proc.process_consumed_note
    # read core note data
    # ---------------------------------------------------------------------------------------------

    # dup the note index
    dup
    # => [i, i]

    # compute address to store note hash
    exec.layout::get_consumed_note_ptr
    # => [note_ptr, i]

    # compute address to store core note data
    dup exec.layout::get_consumed_note_core_ptr
    # => [note_data_ptr, note_ptr, i]

    # read note data from the advice provider
    padw padw padw
    adv_pipe hperm adv_pipe hperm
    # => [PERM, PERM, PERM, note_data_ptr + 4, note_ptr, i]

    # extract nullifier (digest)
    dropw swapw dropw movup.4 drop
    # => [DIG, note_ptr, i]

    # compute address for nullifier
    movup.6 exec.layout::get_consumed_note_nullifier_ptr
    # => [nullifier_ptr, DIG, note_ptr]

    # store nullifier in memory and drop from stack
    mem_storew dropw
    # => [note_ptr]

    # ingest note assets
    # ---------------------------------------------------------------------------------------------

    # read the metadata from the advice provider and store in memory
    padw adv_loadw dup.4
    # => [note_ptr, NOTE_META, note_ptr]

    exec.layout::set_consumed_note_metadata
    # => [note_ptr]

    # get the number of assets
    dup exec.layout::get_consumed_note_num_assets
    # => [num_assets, note_ptr]

    # assert the number of assets is within limits
    dup exec.constants::get_max_assets_per_note lte assert
    # => [num_assets, note_ptr]

    # round up the number of assets to the next multiple of 2 (simplifies reading of assets)
    dup push.1 u32and add
    # => [rounded_num_assets, note_ptr]

    # initiate counter for assets
    push.0
    # => [counter, rounded_num_assets, note_ptr]

    # prepare address and stack for reading assets
    dup.2 exec.layout::get_consumed_note_assets_ptr padw padw padw
    # => [PAD, PAD, PADW, assets_ptr, counter, rounded_num_assets, note_ptr]

    # check if the number of assets is greater then 0
    dup.14 dup.14 neq
    # => [should_loop, PAD, PAD, PAD, assets_ptr, counter, rounded_num_assets, note_ptr]

    # loop and read assets from the advice provider
    while.true
        # read assets from advice provider
        adv_pipe hperm
        # => [PERM, PERM, PERM, assets_ptr, counter, rounded_num_assets, note_ptr]

        # check if we should loop again
        movup.13 push.2 add dup movdn.14 dup.15 neq
        # => [should_loop, PERM, PERM, PERM, assets_ptr, counter, rounded_num_assets, note_ptr]
    end
    # => [PERM, PERM, PERM, assets_ptr, counter, rounded_num_assets, note_ptr]

    # extract digest from hasher rate elements (h_0, ..., h_3)
    dropw swapw dropw
    # => [DIG, assets_ptr, counter, rounded_num_assets, note_ptr]

    # clean and rearrange stack
    swapw drop drop drop dup movdn.5
    # => [note_ptr, DIG, note_ptr]

    # get expected note vault from memory
    exec.layout::get_consumed_note_vault_root
    # => [V, DIG, note_ptr]

    # assert that the computed hash matches the expected hash
    assert_eqw
    # => [note_ptr]

    # insert note assets into the input vault
    # ---------------------------------------------------------------------------------------------
    # prepare stack for iteration over note assets
    exec.layout::get_input_vault_root_ptr dup.1 exec.layout::get_consumed_note_assets_ptr
    # => [assets_start_ptr, input_vault_root_ptr, note_ptr]

    # calculate assets end ptr
    dup dup.3 exec.layout::get_consumed_note_num_assets add swap
    # => [assets_start_ptr, assets_end_ptr, input_vault_root_ptr, note_ptr]

    # loop over assets and insert them into input vault

    # assess if we should loop
    dup.1 dup.1 neq
    # => [should_loop, assets_start_ptr, assets_end_ptr, input_vault_root_ptr, note_ptr]

    while.true
        # duplicate input_vault_root_ptr
        dup.2
        # => [input_vault_root_ptr, assets_start_ptr, assets_end_ptr, input_vault_root_ptr, note_ptr]

        # read the asset from memory
        padw dup.5 mem_loadw
        # => [ASSET, input_vault_root_ptr, assets_start_ptr, assets_end_ptr, input_vault_root_ptr, note_ptr]

        # insert asset into input vault
        exec.asset_vault::add_asset dropw
        # => [assets_start_ptr, assets_end_ptr, input_vault_root_ptr, note_ptr]

        # increment assets_start_ptr and asses if we should loop again
        add.1 dup.1 dup.1 neq
        # => [should_loop, assets_start_ptr, assets_end_ptr, input_vault_root_ptr, note_ptr]
    end

    # clean stack
    drop drop drop

    # compute note hash
    # ---------------------------------------------------------------------------------------------

    # TODO: This should be optimized using the `hperm` operation

    # serial number hash - serial_hash = hmerge(serial_number, 0)
    dup exec.layout::get_consumed_note_serial_num padw hmerge
    # => [SERIAL_HASH, note_ptr]

    # hash serial_hash with script hash - merge_script = hmerge(serial_hash, script_hash)
    dup.4 exec.layout::get_consumed_note_script_root hmerge
    # => [MERGE_SCRIPT, note_ptr]

    # hash merge_script with inputs hash - recipient = hmerge(merge_script, inputs_hash)
    dup.4 exec.layout::get_consumed_note_inputs_hash hmerge
    # => [RECIPIENT, note_ptr]

    # hash recipient with vault hash - note_hash = hmerge(recipient, vault_hash)
    dup.4 exec.layout::get_consumed_note_vault_root hmerge
    # => [NOTE_HASH, note_ptr]

    # store note hash in memory and clear stack
    dup.4 exec.layout::set_consumed_note_hash
    # => [NOTE_HASH]

    # load the note metadata
    movup.4 exec.layout::get_consumed_note_metadata
    # => [NOTE_META, NOTE_HASH]

    # merge the note hash with the note metadata to compute authentication digest
    hmerge
    # => [AUTH_DIGEST]

    exec.authenticate_note
end

#! Process the consumed notes data provided via the advice provider. This involves reading the data
#! from the advice provider and storing it at the appropriate memory addresses. As each note is
#! consumed its hash and nullifier is computed. The transaction nullifier commitment is computed
#! via a sequential hash of all (nullifier, script_root) pairs for all consumed notes.
#!
#! Stack: []
#! Advice stack: [num_cn,
#!               CN1_SN, CN1_SR, CN1_IR, CN1_VR, CN1_M,
#!               CN1_A1, CN1_A2, ...
#!
#!               CN2_SN,CN2_SR, CN2_IR, CN2_VR, CN2_M,
#!               CN2_A1, CN2_A2, ...
#!               ...]
#! Output: []
#!
#! - num_cn is the number of consumed notes.
#! - CN1_SN is the serial number of consumed note 1.
#! - CN1_SR is the script root of consumed note 1.
#! - CN1_IR is the inputs root of consumed note 1.
#! - CN1_VR is the vault root of consumed note 1.
#! - CN1_M is the metadata of consumed note 1.
#! - CN1_A1 is the first asset of consumed note 1.
#! - CN1_A2 is the second asset of consumed note 1.
proc.process_consumed_notes_data
    # load the consumed notes data onto the advice stack
    exec.layout::get_nullifier_com adv.push_mapval dropw

    # read the number of consumed notes from the advice provider
    adv_push.1

    # store the number of consumed notes
    dup exec.layout::set_total_num_consumed_notes

    # assert the number of consumed notes is within limits
    dup exec.constants::get_max_num_consumed_notes lte assert

    # loop over consumed notes and read data
    # ---------------------------------------------------------------------------------------------

    # initialize counter for consumed notes
    push.0

    # check if the number of consumed notes is greater then 0. Conditional for the while loop.
    dup.1 dup.1 neq

    # loop and read note data from the advice provider
    while.true
        dup exec.process_consumed_note

        # increment consumed note counter and check if we should loop again
        add.1 dup.1 dup.1 neq
    end

    # drop counter
    drop

    # compute nullifier commitment
    # ---------------------------------------------------------------------------------------------

    # initiate counter for nullifiers
    push.0

    # initiate stack for sequential hash to compute nullifier commitment
    padw padw padw

    # check if the number of consumed notes is greater then 0. Conditional for the while loop.
    dup.13 dup.13 neq

    # loop and sequentially hash hperm(nullifier, script_root) over all consumed notes
    while.true
        # clear hasher rate
        dropw dropw

        # get consumed note nullifier
        dup.4 exec.layout::get_consumed_note_nullifier

        # get consumed note script root
        dup.8 exec.layout::get_consumed_note_ptr exec.layout::get_consumed_note_script_root

        # compute hperm(nullifier, script_root)
        hperm

        # increment nullifier counter and check if we should loop again
        movup.12 add.1 dup movdn.13 dup.14 neq
    end

    # extract nullifier hash
    dropw swapw dropw

    # assert nullifier hash is what we would expect
    exec.layout::get_nullifier_com assert_eqw

    # clear stack
    drop drop

    # set the current consumed note pointer to the first consumed note
    push.0 exec.layout::get_consumed_note_ptr exec.layout::set_current_consumed_note_ptr
    # => []
end

# TRANSACTION SCRIPT
# =================================================================================================

#! Reads the transaction script root from the advice provider stack and stores the root at the
#! appropriate memory address.
#!
#! Advice Stack: [TXSR]
#! Stack: []
#! Output: []
#!
#! - TXSR is the transaction script root.
proc.process_tx_script_root
    # read the transaction script root from the advice stack
    adv_loadw
    # => [TXSR]

    # store the transaction script root in memory
    exec.layout::set_tx_script_root
    # => []
end

# TRANSACTION PROLOGUE
# =================================================================================================

#! The transaction prologue is executed at the beginning of a transaction. Its responsibility is:
#! 1. "Unhash" inputs, authenticate the data and store it in the root contexts memory.
#! 2. Build a single vault containing assets of all inputs (input notes combined with current
#!    account vault).
#! 3. Verify that all consumed notes are present in the note db.
#!
#! Errors:
#!  - If data provided by the advice provider does not match global inputs.
#!  - The account data is invalid.
#!  - Any of the consumed notes do note exist in the note db.
#!
#! Stack:        [BH, acct_id, IAH, NC]
#! Advice stack: [NR, PH, CR, SR, BR, PH, BN,
#!                acct_id, ZERO, ZERO, nonce, AVR, ASR, ACR,
#!                num_cn,
#!                CN1_SN, CN1_SR, CN1_IR, CN1_VR, CN1_M,
#!                CN1_A1, CN1_A2, ...
#!                CN2_SN,CN2_SR, CN2_IR, CN2_VR, CN2_M,
#!                CN2_A1, CN2_A2, ...,
#!                ...,
#!                TXSR]
#! Output:       []
#!
#!
#! - BH is the latest known block hash at the time of transaction execution.
#! - acct_id is the account id of the account that the transaction is being executed against.
#! - NR is the note root of the last known block.
#! - PH is the previous hash of the last known block.
#! - CR is the chain root of the last known block.
#! - SR is the state root of the last known block.
#! - BR is the batch root of the last known block.
#! - PH is the proof hash of the last known block.
#! - BN is the block number of the last known block ([block_number, 0, 0, 0]).
#! - IAH is the initial account hash of the account that the transaction is being executed against.
#! - NC is the nullifier commitment of the transaction. This is a sequential hash of all
#!   (nullifier, script_root) pairs for the notes consumed in the transaction.
#! - nonce is the account nonce.
#! - AVR is the account vault root.
#! - ASR is the account storage root.
#! - ACR is the account code root.
#! - num_cn is the number of consumed notes.
#! - CN1_SN is the serial number of consumed note 1.
#! - CN1_SR is the script root of consumed note 1.
#! - CN1_IR is the inputs root of consumed note 1.
#! - CN1_VR is the vault root of consumed note 1.
#! - CN1_M is the metadata of consumed note 1.
#! - CN1_A1 is the first asset of consumed note 1.
#! - CN1_A2 is the second asset of consumed note 1.
#! - TXSR is the transaction script root.
export.prepare_transaction
    # process global inputs
    exec.process_global_inputs

    # process block data
    exec.process_block_data

    # process chain data
    exec.process_chain_data

    # process account data
    exec.process_acct_data

    # process consumed notes data
    exec.process_consumed_notes_data

    # process transaction script root
    exec.process_tx_script_root
end
